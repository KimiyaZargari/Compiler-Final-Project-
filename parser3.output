Grammar

    0 $accept: program $end

    1 program: macros Classes

    2 macros: macros macro
    3       | /* empty */

    4 macro: TOKEN_REFERENCE TOKEN_STRING

    5 Classes: Classes Class
    6        | /* empty */

    7 Class: TOKEN_CLASS TOKEN_ID PM TOKEN_LCB symbol_decs M TOKEN_RCB

    8 PM: /* empty */

    9 M: /* empty */

   10 symbol_decs: symbol_decs symbol_dec
   11            | /* empty */

   12 symbol_dec: var_dec
   13           | func_dec

   14 var_dec: var_type var_list TOKEN_SEMICOLON

   15 var_type: return_type
   16         | TOKEN_STATIC return_type

   17 return_type: TOKEN_INT_TYPE
   18            | TOKEN_REAL_TYPE
   19            | TOKEN_BOOL_TYPE
   20            | TOKEN_STRING_TYPE
   21            | TOKEN_ID

   22 var_list: var_list TOKEN_COMMA var_list_item
   23         | var_list_item

   24 var_list_item: TOKEN_ID

   25 @1: /* empty */

   26 var_list_item: TOKEN_ID @1 TOKEN_ASSIGNMENT exp

   27 func_dec: var_type func_body
   28         | TOKEN_VOID func_body
   29         | TOKEN_STATIC TOKEN_VOID func_body

   30 @2: /* empty */

   31 func_body: TOKEN_ID NP M @2 TOKEN_LP formal_arguments TOKEN_RP block M ret M

   32 ret: /* empty */

   33 NP: /* empty */

   34 formal_arguments: formal_arguments TOKEN_COMMA formal_argument
   35                 | /* empty */
   36                 | formal_argument

   37 formal_argument: return_type TOKEN_ID

   38 block: M TOKEN_LCB statements_list TOKEN_RCB M
   39      | statement

   40 statements_list: statements_list M statement
   41                | /* empty */

   42 statement: TOKEN_SEMICOLON
   43          | exp TOKEN_SEMICOLON
   44          | assignment
   45          | Print
   46          | statement_var_dec
   47          | If
   48          | For
   49          | While
   50          | Return
   51          | Break
   52          | Continue

   53 assignment: lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON

   54 lvalue: TOKEN_ID
   55       | TOKEN_ID TOKEN_DOT TOKEN_ID

   56 Print: TOKEN_PRINT TOKEN_LP exp TOKEN_RP TOKEN_SEMICOLON

   57 statement_var_dec: return_type var_list TOKEN_SEMICOLON

   58 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE NS M block M

   60 if_code: /* empty */

   61 if_pop: /* empty */

   62 if_tbl: /* empty */

   63 NS: /* empty */

   64 Elseifs: Elseifs Elseif M
   65        | /* empty */

   66 Elseif: TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP M block ES M

   67 ES: /* empty */

   68 @3: /* empty */

   69 @4: /* empty */

   70 @5: /* empty */

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M

   72 for_tbl: /* empty */

   73 @6: /* empty */

   74 @7: /* empty */

   75 While: TOKEN_WHILE while_tbl M TOKEN_LP exp TOKEN_RP @6 M block @7 M

   76 while_tbl: /* empty */

   77 @8: /* empty */

   78 @9: /* empty */

   79 Return: TOKEN_RETURN @8 exp TOKEN_SEMICOLON @9 ret

   80 Break: TOKEN_BREAK TOKEN_SEMICOLON

   81 Continue: TOKEN_CONTINUE TOKEN_SEMICOLON

   82 exp: TOKEN_INTEGER
   83    | TOKEN_REAL
   84    | TOKEN_TRUE
   85    | TOKEN_FALSE
   86    | TOKEN_STRING
   87    | lvalue
   88    | binary_operation
   89    | logical_operation
   90    | comparison_operation
   91    | bitwise_operation
   92    | unary_operation
   93    | TOKEN_LP exp TOKEN_RP
   94    | function_call

   95 binary_operation: exp TOKEN_ADDITION exp
   96                 | exp TOKEN_SUBTRACTION exp
   97                 | exp TOKEN_MULTIPLICATION exp
   98                 | exp TOKEN_DIVISION exp
   99                 | exp TOKEN_MODULO exp
  100                 | exp TOKEN_POWER exp
  101                 | exp TOKEN_SHIFT_LEFT exp
  102                 | exp TOKEN_SHIFT_RIGHT exp

  103 logical_operation: exp TOKEN_AND M exp
  104                  | exp TOKEN_OR M exp

  105 comparison_operation: exp TOKEN_LT exp
  106                     | exp TOKEN_LE exp
  107                     | exp TOKEN_GT exp
  108                     | exp TOKEN_GE exp
  109                     | exp TOKEN_EQ exp
  110                     | exp TOKEN_NE exp

  111 bitwise_operation: exp TOKEN_BITWISE_AND exp
  112                  | exp TOKEN_BITWISE_OR exp

  113 unary_operation: TOKEN_SUBTRACTION exp
  114                | TOKEN_NOT exp
  115                | TOKEN_BITWISE_NOT exp

  116 @10: /* empty */

  117 function_call: TOKEN_ID @10 function_call_body
  118              | TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body

  119 function_call_body: TOKEN_LP actual_arguments TOKEN_RP

  120 actual_arguments: actual_arguments_list
  121                 | /* empty */

  122 actual_arguments_list: actual_arguments_list TOKEN_COMMA exp
  123                      | exp


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_CLASS (258) 7
TOKEN_REFERENCE (259) 4
TOKEN_STATIC (260) 16 29
TOKEN_INT_TYPE (261) 17
TOKEN_REAL_TYPE (262) 18
TOKEN_BOOL_TYPE (263) 19
TOKEN_STRING_TYPE (264) 20
TOKEN_VOID (265) 28 29
TOKEN_TRUE (266) 84
TOKEN_FALSE (267) 85
TOKEN_PRINT (268) 56
TOKEN_RETURN (269) 79
TOKEN_BREAK (270) 80
TOKEN_CONTINUE (271) 81
TOKEN_WHILE (272) 75
TOKEN_FOR (273) 71
TOKEN_TO (274) 71
TOKEN_IN (275) 71
TOKEN_STEPS (276) 71
TOKEN_LCB (277) 7 38
TOKEN_RCB (278) 7 38
TOKEN_LP (279) 31 56 58 59 66 71 75 93 119
TOKEN_RP (280) 31 56 58 59 66 71 75 93 119
TOKEN_DOT (281) 55 118
TOKEN_SEMICOLON (282) 14 42 43 53 56 57 79 80 81
TOKEN_ID (283) 7 21 24 26 31 37 54 55 71 117 118
TOKEN_IF (284) 58 59
TOKEN_ELSEIF (285) 66
TOKEN_ELSE (286) 59
TOKEN_COMMA (287) 22 34 122
TOKEN_INTEGER (288) 82
TOKEN_REAL (289) 83
TOKEN_STRING (290) 4 86
TOKEN_ASSIGNMENT (291) 26 53
TOKEN_OR (292) 104
TOKEN_AND (293) 103
TOKEN_BITWISE_OR (294) 112
TOKEN_BITWISE_AND (295) 111
TOKEN_NE (296) 110
TOKEN_EQ (297) 109
TOKEN_LE (298) 106
TOKEN_LT (299) 105
TOKEN_GE (300) 108
TOKEN_GT (301) 107
TOKEN_SHIFT_LEFT (302) 101
TOKEN_SHIFT_RIGHT (303) 102
TOKEN_SUBTRACTION (304) 96 113
TOKEN_ADDITION (305) 95
TOKEN_MODULO (306) 99
TOKEN_DIVISION (307) 98
TOKEN_MULTIPLICATION (308) 97
TOKEN_POWER (309) 100
TOKEN_BITWISE_NOT (310) 115
TOKEN_NOT (311) 114


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
program (58)
    on left: 1, on right: 0
macros (59)
    on left: 2 3, on right: 1 2
macro (60)
    on left: 4, on right: 2
Classes (61)
    on left: 5 6, on right: 1 5
Class (62)
    on left: 7, on right: 5
PM (63)
    on left: 8, on right: 7
M (64)
    on left: 9, on right: 7 31 38 40 58 59 64 66 71 75 103 104
symbol_decs (65)
    on left: 10 11, on right: 7 10
symbol_dec (66)
    on left: 12 13, on right: 10
var_dec (67)
    on left: 14, on right: 12
var_type (68)
    on left: 15 16, on right: 14 27
return_type (69)
    on left: 17 18 19 20 21, on right: 15 16 37 57
var_list (70)
    on left: 22 23, on right: 14 22 57
var_list_item (71)
    on left: 24 26, on right: 22 23
@1 (72)
    on left: 25, on right: 26
func_dec (73)
    on left: 27 28 29, on right: 13
func_body (74)
    on left: 31, on right: 27 28 29
@2 (75)
    on left: 30, on right: 31
ret (76)
    on left: 32, on right: 31 79
NP (77)
    on left: 33, on right: 31
formal_arguments (78)
    on left: 34 35 36, on right: 31 34
formal_argument (79)
    on left: 37, on right: 34 36
block (80)
    on left: 38 39, on right: 31 58 59 66 71 75
statements_list (81)
    on left: 40 41, on right: 38 40
statement (82)
    on left: 42 43 44 45 46 47 48 49 50 51 52, on right: 39 40
assignment (83)
    on left: 53, on right: 44
lvalue (84)
    on left: 54 55, on right: 53 87
Print (85)
    on left: 56, on right: 45
statement_var_dec (86)
    on left: 57, on right: 46
If (87)
    on left: 58 59, on right: 47
if_code (88)
    on left: 60, on right: 58 59
if_pop (89)
    on left: 61, on right: 58 59
if_tbl (90)
    on left: 62, on right: 58 59
NS (91)
    on left: 63, on right: 59
Elseifs (92)
    on left: 64 65, on right: 58 59 64
Elseif (93)
    on left: 66, on right: 64
ES (94)
    on left: 67, on right: 66
For (95)
    on left: 71, on right: 48
@3 (96)
    on left: 68, on right: 71
@4 (97)
    on left: 69, on right: 71
@5 (98)
    on left: 70, on right: 71
for_tbl (99)
    on left: 72, on right: 71
While (100)
    on left: 75, on right: 49
@6 (101)
    on left: 73, on right: 75
@7 (102)
    on left: 74, on right: 75
while_tbl (103)
    on left: 76, on right: 75
Return (104)
    on left: 79, on right: 50
@8 (105)
    on left: 77, on right: 79
@9 (106)
    on left: 78, on right: 79
Break (107)
    on left: 80, on right: 51
Continue (108)
    on left: 81, on right: 52
exp (109)
    on left: 82 83 84 85 86 87 88 89 90 91 92 93 94,
    on right: 26 43 53 56 58 59 66 71 75 79 93 95 96 97 98 99 100 101
    102 103 104 105 106 107 108 109 110 111 112 113 114 115 122 123
binary_operation (110)
    on left: 95 96 97 98 99 100 101 102, on right: 88
logical_operation (111)
    on left: 103 104, on right: 89
comparison_operation (112)
    on left: 105 106 107 108 109 110, on right: 90
bitwise_operation (113)
    on left: 111 112, on right: 91
unary_operation (114)
    on left: 113 114 115, on right: 92
function_call (115)
    on left: 117 118, on right: 94
@10 (116)
    on left: 116, on right: 117
function_call_body (117)
    on left: 119, on right: 117 118
actual_arguments (118)
    on left: 120 121, on right: 119
actual_arguments_list (119)
    on left: 122 123, on right: 120 122


state 0

    0 $accept: . program $end

    $default  reduce using rule 3 (macros)

    program  go to state 1
    macros   go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: macros . Classes
    2 macros: macros . macro

    TOKEN_REFERENCE  shift, and go to state 4

    $default  reduce using rule 6 (Classes)

    macro    go to state 5
    Classes  go to state 6


state 3

    0 $accept: program $end .

    $default  accept


state 4

    4 macro: TOKEN_REFERENCE . TOKEN_STRING

    TOKEN_STRING  shift, and go to state 7


state 5

    2 macros: macros macro .

    $default  reduce using rule 2 (macros)


state 6

    1 program: macros Classes .
    5 Classes: Classes . Class

    TOKEN_CLASS  shift, and go to state 8

    $default  reduce using rule 1 (program)

    Class  go to state 9


state 7

    4 macro: TOKEN_REFERENCE TOKEN_STRING .

    $default  reduce using rule 4 (macro)


state 8

    7 Class: TOKEN_CLASS . TOKEN_ID PM TOKEN_LCB symbol_decs M TOKEN_RCB

    TOKEN_ID  shift, and go to state 10


state 9

    5 Classes: Classes Class .

    $default  reduce using rule 5 (Classes)


state 10

    7 Class: TOKEN_CLASS TOKEN_ID . PM TOKEN_LCB symbol_decs M TOKEN_RCB

    $default  reduce using rule 8 (PM)

    PM  go to state 11


state 11

    7 Class: TOKEN_CLASS TOKEN_ID PM . TOKEN_LCB symbol_decs M TOKEN_RCB

    TOKEN_LCB  shift, and go to state 12


state 12

    7 Class: TOKEN_CLASS TOKEN_ID PM TOKEN_LCB . symbol_decs M TOKEN_RCB

    $default  reduce using rule 11 (symbol_decs)

    symbol_decs  go to state 13


state 13

    7 Class: TOKEN_CLASS TOKEN_ID PM TOKEN_LCB symbol_decs . M TOKEN_RCB
   10 symbol_decs: symbol_decs . symbol_dec

    TOKEN_STATIC       shift, and go to state 14
    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_VOID         shift, and go to state 19
    TOKEN_ID           shift, and go to state 20

    $default  reduce using rule 9 (M)

    M            go to state 21
    symbol_dec   go to state 22
    var_dec      go to state 23
    var_type     go to state 24
    return_type  go to state 25
    func_dec     go to state 26


state 14

   16 var_type: TOKEN_STATIC . return_type
   29 func_dec: TOKEN_STATIC . TOKEN_VOID func_body

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_VOID         shift, and go to state 27
    TOKEN_ID           shift, and go to state 20

    return_type  go to state 28


state 15

   17 return_type: TOKEN_INT_TYPE .

    $default  reduce using rule 17 (return_type)


state 16

   18 return_type: TOKEN_REAL_TYPE .

    $default  reduce using rule 18 (return_type)


state 17

   19 return_type: TOKEN_BOOL_TYPE .

    $default  reduce using rule 19 (return_type)


state 18

   20 return_type: TOKEN_STRING_TYPE .

    $default  reduce using rule 20 (return_type)


state 19

   28 func_dec: TOKEN_VOID . func_body

    TOKEN_ID  shift, and go to state 29

    func_body  go to state 30


state 20

   21 return_type: TOKEN_ID .

    $default  reduce using rule 21 (return_type)


state 21

    7 Class: TOKEN_CLASS TOKEN_ID PM TOKEN_LCB symbol_decs M . TOKEN_RCB

    TOKEN_RCB  shift, and go to state 31


state 22

   10 symbol_decs: symbol_decs symbol_dec .

    $default  reduce using rule 10 (symbol_decs)


state 23

   12 symbol_dec: var_dec .

    $default  reduce using rule 12 (symbol_dec)


state 24

   14 var_dec: var_type . var_list TOKEN_SEMICOLON
   27 func_dec: var_type . func_body

    TOKEN_ID  shift, and go to state 32

    var_list       go to state 33
    var_list_item  go to state 34
    func_body      go to state 35


state 25

   15 var_type: return_type .

    $default  reduce using rule 15 (var_type)


state 26

   13 symbol_dec: func_dec .

    $default  reduce using rule 13 (symbol_dec)


state 27

   29 func_dec: TOKEN_STATIC TOKEN_VOID . func_body

    TOKEN_ID  shift, and go to state 29

    func_body  go to state 36


state 28

   16 var_type: TOKEN_STATIC return_type .

    $default  reduce using rule 16 (var_type)


state 29

   31 func_body: TOKEN_ID . NP M @2 TOKEN_LP formal_arguments TOKEN_RP block M ret M

    $default  reduce using rule 33 (NP)

    NP  go to state 37


state 30

   28 func_dec: TOKEN_VOID func_body .

    $default  reduce using rule 28 (func_dec)


state 31

    7 Class: TOKEN_CLASS TOKEN_ID PM TOKEN_LCB symbol_decs M TOKEN_RCB .

    $default  reduce using rule 7 (Class)


state 32

   24 var_list_item: TOKEN_ID .
   26              | TOKEN_ID . @1 TOKEN_ASSIGNMENT exp
   31 func_body: TOKEN_ID . NP M @2 TOKEN_LP formal_arguments TOKEN_RP block M ret M

    TOKEN_LP          reduce using rule 33 (NP)
    TOKEN_ASSIGNMENT  reduce using rule 25 (@1)
    $default          reduce using rule 24 (var_list_item)

    @1  go to state 38
    NP  go to state 37


state 33

   14 var_dec: var_type var_list . TOKEN_SEMICOLON
   22 var_list: var_list . TOKEN_COMMA var_list_item

    TOKEN_SEMICOLON  shift, and go to state 39
    TOKEN_COMMA      shift, and go to state 40


state 34

   23 var_list: var_list_item .

    $default  reduce using rule 23 (var_list)


state 35

   27 func_dec: var_type func_body .

    $default  reduce using rule 27 (func_dec)


state 36

   29 func_dec: TOKEN_STATIC TOKEN_VOID func_body .

    $default  reduce using rule 29 (func_dec)


state 37

   31 func_body: TOKEN_ID NP . M @2 TOKEN_LP formal_arguments TOKEN_RP block M ret M

    $default  reduce using rule 9 (M)

    M  go to state 41


state 38

   26 var_list_item: TOKEN_ID @1 . TOKEN_ASSIGNMENT exp

    TOKEN_ASSIGNMENT  shift, and go to state 42


state 39

   14 var_dec: var_type var_list TOKEN_SEMICOLON .

    $default  reduce using rule 14 (var_dec)


state 40

   22 var_list: var_list TOKEN_COMMA . var_list_item

    TOKEN_ID  shift, and go to state 43

    var_list_item  go to state 44


state 41

   31 func_body: TOKEN_ID NP M . @2 TOKEN_LP formal_arguments TOKEN_RP block M ret M

    $default  reduce using rule 30 (@2)

    @2  go to state 45


state 42

   26 var_list_item: TOKEN_ID @1 TOKEN_ASSIGNMENT . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 57
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 43

   24 var_list_item: TOKEN_ID .
   26              | TOKEN_ID . @1 TOKEN_ASSIGNMENT exp

    TOKEN_ASSIGNMENT  reduce using rule 25 (@1)
    $default          reduce using rule 24 (var_list_item)

    @1  go to state 38


state 44

   22 var_list: var_list TOKEN_COMMA var_list_item .

    $default  reduce using rule 22 (var_list)


state 45

   31 func_body: TOKEN_ID NP M @2 . TOKEN_LP formal_arguments TOKEN_RP block M ret M

    TOKEN_LP  shift, and go to state 64


state 46

   84 exp: TOKEN_TRUE .

    $default  reduce using rule 84 (exp)


state 47

   85 exp: TOKEN_FALSE .

    $default  reduce using rule 85 (exp)


state 48

   93 exp: TOKEN_LP . exp TOKEN_RP

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 65
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 49

   54 lvalue: TOKEN_ID .
   55       | TOKEN_ID . TOKEN_DOT TOKEN_ID
  117 function_call: TOKEN_ID . @10 function_call_body
  118              | TOKEN_ID . TOKEN_DOT TOKEN_ID function_call_body

    TOKEN_DOT  shift, and go to state 66

    TOKEN_LP  reduce using rule 116 (@10)
    $default  reduce using rule 54 (lvalue)

    @10  go to state 67


state 50

   82 exp: TOKEN_INTEGER .

    $default  reduce using rule 82 (exp)


state 51

   83 exp: TOKEN_REAL .

    $default  reduce using rule 83 (exp)


state 52

   86 exp: TOKEN_STRING .

    $default  reduce using rule 86 (exp)


state 53

  113 unary_operation: TOKEN_SUBTRACTION . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 68
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 54

  115 unary_operation: TOKEN_BITWISE_NOT . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 69
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 55

  114 unary_operation: TOKEN_NOT . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 70
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 56

   87 exp: lvalue .

    $default  reduce using rule 87 (exp)


state 57

   26 var_list_item: TOKEN_ID @1 TOKEN_ASSIGNMENT exp .
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 26 (var_list_item)


state 58

   88 exp: binary_operation .

    $default  reduce using rule 88 (exp)


state 59

   89 exp: logical_operation .

    $default  reduce using rule 89 (exp)


state 60

   90 exp: comparison_operation .

    $default  reduce using rule 90 (exp)


state 61

   91 exp: bitwise_operation .

    $default  reduce using rule 91 (exp)


state 62

   92 exp: unary_operation .

    $default  reduce using rule 92 (exp)


state 63

   94 exp: function_call .

    $default  reduce using rule 94 (exp)


state 64

   31 func_body: TOKEN_ID NP M @2 TOKEN_LP . formal_arguments TOKEN_RP block M ret M

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_ID           shift, and go to state 20

    $default  reduce using rule 35 (formal_arguments)

    return_type       go to state 89
    formal_arguments  go to state 90
    formal_argument   go to state 91


state 65

   93 exp: TOKEN_LP exp . TOKEN_RP
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_RP              shift, and go to state 92
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 66

   55 lvalue: TOKEN_ID TOKEN_DOT . TOKEN_ID
  118 function_call: TOKEN_ID TOKEN_DOT . TOKEN_ID function_call_body

    TOKEN_ID  shift, and go to state 93


state 67

  117 function_call: TOKEN_ID @10 . function_call_body

    TOKEN_LP  shift, and go to state 94

    function_call_body  go to state 95


state 68

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp
  113 unary_operation: TOKEN_SUBTRACTION exp .

    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 113 (unary_operation)


state 69

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp
  115 unary_operation: TOKEN_BITWISE_NOT exp .

    $default  reduce using rule 115 (unary_operation)


state 70

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp
  114 unary_operation: TOKEN_NOT exp .

    $default  reduce using rule 114 (unary_operation)


state 71

  104 logical_operation: exp TOKEN_OR . M exp

    $default  reduce using rule 9 (M)

    M  go to state 96


state 72

  103 logical_operation: exp TOKEN_AND . M exp

    $default  reduce using rule 9 (M)

    M  go to state 97


state 73

  112 bitwise_operation: exp TOKEN_BITWISE_OR . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 98
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 74

  111 bitwise_operation: exp TOKEN_BITWISE_AND . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 99
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 75

  110 comparison_operation: exp TOKEN_NE . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 100
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 76

  109 comparison_operation: exp TOKEN_EQ . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 101
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 77

  106 comparison_operation: exp TOKEN_LE . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 102
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 78

  105 comparison_operation: exp TOKEN_LT . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 103
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 79

  108 comparison_operation: exp TOKEN_GE . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 104
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 80

  107 comparison_operation: exp TOKEN_GT . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 105
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 81

  101 binary_operation: exp TOKEN_SHIFT_LEFT . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 106
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 82

  102 binary_operation: exp TOKEN_SHIFT_RIGHT . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 107
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 83

   96 binary_operation: exp TOKEN_SUBTRACTION . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 108
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 84

   95 binary_operation: exp TOKEN_ADDITION . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 109
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 85

   99 binary_operation: exp TOKEN_MODULO . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 110
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 86

   98 binary_operation: exp TOKEN_DIVISION . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 111
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 87

   97 binary_operation: exp TOKEN_MULTIPLICATION . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 112
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 88

  100 binary_operation: exp TOKEN_POWER . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 113
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 89

   37 formal_argument: return_type . TOKEN_ID

    TOKEN_ID  shift, and go to state 114


state 90

   31 func_body: TOKEN_ID NP M @2 TOKEN_LP formal_arguments . TOKEN_RP block M ret M
   34 formal_arguments: formal_arguments . TOKEN_COMMA formal_argument

    TOKEN_RP     shift, and go to state 115
    TOKEN_COMMA  shift, and go to state 116


state 91

   36 formal_arguments: formal_argument .

    $default  reduce using rule 36 (formal_arguments)


state 92

   93 exp: TOKEN_LP exp TOKEN_RP .

    $default  reduce using rule 93 (exp)


state 93

   55 lvalue: TOKEN_ID TOKEN_DOT TOKEN_ID .
  118 function_call: TOKEN_ID TOKEN_DOT TOKEN_ID . function_call_body

    TOKEN_LP  shift, and go to state 94

    $default  reduce using rule 55 (lvalue)

    function_call_body  go to state 117


state 94

  119 function_call_body: TOKEN_LP . actual_arguments TOKEN_RP

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    $default  reduce using rule 121 (actual_arguments)

    lvalue                 go to state 56
    exp                    go to state 118
    binary_operation       go to state 58
    logical_operation      go to state 59
    comparison_operation   go to state 60
    bitwise_operation      go to state 61
    unary_operation        go to state 62
    function_call          go to state 63
    actual_arguments       go to state 119
    actual_arguments_list  go to state 120


state 95

  117 function_call: TOKEN_ID @10 function_call_body .

    $default  reduce using rule 117 (function_call)


state 96

  104 logical_operation: exp TOKEN_OR M . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 121
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 97

  103 logical_operation: exp TOKEN_AND M . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 122
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 98

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp
  112                  | exp TOKEN_BITWISE_OR exp .

    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 112 (bitwise_operation)


state 99

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  111                  | exp TOKEN_BITWISE_AND exp .
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 111 (bitwise_operation)


state 100

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  110                     | exp TOKEN_NE exp .
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 110 (comparison_operation)


state 101

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  109                     | exp TOKEN_EQ exp .
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 109 (comparison_operation)


state 102

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  106                     | exp TOKEN_LE exp .
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 106 (comparison_operation)


state 103

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  105                     | exp TOKEN_LT exp .
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 105 (comparison_operation)


state 104

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  108                     | exp TOKEN_GE exp .
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 108 (comparison_operation)


state 105

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  107                     | exp TOKEN_GT exp .
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 107 (comparison_operation)


state 106

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  101                 | exp TOKEN_SHIFT_LEFT exp .
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 101 (binary_operation)


state 107

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  102                 | exp TOKEN_SHIFT_RIGHT exp .
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 102 (binary_operation)


state 108

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   96                 | exp TOKEN_SUBTRACTION exp .
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 96 (binary_operation)


state 109

   95 binary_operation: exp . TOKEN_ADDITION exp
   95                 | exp TOKEN_ADDITION exp .
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 95 (binary_operation)


state 110

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
   99                 | exp TOKEN_MODULO exp .
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_POWER  shift, and go to state 88

    $default  reduce using rule 99 (binary_operation)


state 111

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   98                 | exp TOKEN_DIVISION exp .
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_POWER  shift, and go to state 88

    $default  reduce using rule 98 (binary_operation)


state 112

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   97                 | exp TOKEN_MULTIPLICATION exp .
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_POWER  shift, and go to state 88

    $default  reduce using rule 97 (binary_operation)


state 113

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  100                 | exp TOKEN_POWER exp .
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    $default  reduce using rule 100 (binary_operation)


state 114

   37 formal_argument: return_type TOKEN_ID .

    $default  reduce using rule 37 (formal_argument)


state 115

   31 func_body: TOKEN_ID NP M @2 TOKEN_LP formal_arguments TOKEN_RP . block M ret M

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_PRINT        shift, and go to state 123
    TOKEN_RETURN       shift, and go to state 124
    TOKEN_BREAK        shift, and go to state 125
    TOKEN_CONTINUE     shift, and go to state 126
    TOKEN_WHILE        shift, and go to state 127
    TOKEN_FOR          shift, and go to state 128
    TOKEN_LP           shift, and go to state 48
    TOKEN_SEMICOLON    shift, and go to state 129
    TOKEN_ID           shift, and go to state 130
    TOKEN_IF           shift, and go to state 131
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    $default  reduce using rule 9 (M)

    M                     go to state 132
    return_type           go to state 133
    block                 go to state 134
    statement             go to state 135
    assignment            go to state 136
    lvalue                go to state 137
    Print                 go to state 138
    statement_var_dec     go to state 139
    If                    go to state 140
    For                   go to state 141
    While                 go to state 142
    Return                go to state 143
    Break                 go to state 144
    Continue              go to state 145
    exp                   go to state 146
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 116

   34 formal_arguments: formal_arguments TOKEN_COMMA . formal_argument

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_ID           shift, and go to state 20

    return_type      go to state 89
    formal_argument  go to state 147


state 117

  118 function_call: TOKEN_ID TOKEN_DOT TOKEN_ID function_call_body .

    $default  reduce using rule 118 (function_call)


state 118

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp
  123 actual_arguments_list: exp .

    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 123 (actual_arguments_list)


state 119

  119 function_call_body: TOKEN_LP actual_arguments . TOKEN_RP

    TOKEN_RP  shift, and go to state 148


state 120

  120 actual_arguments: actual_arguments_list .
  122 actual_arguments_list: actual_arguments_list . TOKEN_COMMA exp

    TOKEN_COMMA  shift, and go to state 149

    $default  reduce using rule 120 (actual_arguments)


state 121

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  104                  | exp TOKEN_OR M exp .
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 104 (logical_operation)


state 122

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  103                  | exp TOKEN_AND M exp .
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 103 (logical_operation)


state 123

   56 Print: TOKEN_PRINT . TOKEN_LP exp TOKEN_RP TOKEN_SEMICOLON

    TOKEN_LP  shift, and go to state 150


state 124

   79 Return: TOKEN_RETURN . @8 exp TOKEN_SEMICOLON @9 ret

    $default  reduce using rule 77 (@8)

    @8  go to state 151


state 125

   80 Break: TOKEN_BREAK . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 152


state 126

   81 Continue: TOKEN_CONTINUE . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 153


state 127

   75 While: TOKEN_WHILE . while_tbl M TOKEN_LP exp TOKEN_RP @6 M block @7 M

    $default  reduce using rule 76 (while_tbl)

    while_tbl  go to state 154


state 128

   71 For: TOKEN_FOR . for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M

    $default  reduce using rule 72 (for_tbl)

    for_tbl  go to state 155


state 129

   42 statement: TOKEN_SEMICOLON .

    $default  reduce using rule 42 (statement)


state 130

   21 return_type: TOKEN_ID .
   54 lvalue: TOKEN_ID .
   55       | TOKEN_ID . TOKEN_DOT TOKEN_ID
  117 function_call: TOKEN_ID . @10 function_call_body
  118              | TOKEN_ID . TOKEN_DOT TOKEN_ID function_call_body

    TOKEN_DOT  shift, and go to state 66

    TOKEN_LP  reduce using rule 116 (@10)
    TOKEN_ID  reduce using rule 21 (return_type)
    $default  reduce using rule 54 (lvalue)

    @10  go to state 67


state 131

   58 If: TOKEN_IF . if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs
   59   | TOKEN_IF . if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE NS M block M

    $default  reduce using rule 62 (if_tbl)

    if_tbl  go to state 156


state 132

   38 block: M . TOKEN_LCB statements_list TOKEN_RCB M

    TOKEN_LCB  shift, and go to state 157


state 133

   57 statement_var_dec: return_type . var_list TOKEN_SEMICOLON

    TOKEN_ID  shift, and go to state 43

    var_list       go to state 158
    var_list_item  go to state 34


state 134

   31 func_body: TOKEN_ID NP M @2 TOKEN_LP formal_arguments TOKEN_RP block . M ret M

    $default  reduce using rule 9 (M)

    M  go to state 159


state 135

   39 block: statement .

    $default  reduce using rule 39 (block)


state 136

   44 statement: assignment .

    $default  reduce using rule 44 (statement)


state 137

   53 assignment: lvalue . TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON
   87 exp: lvalue .

    TOKEN_ASSIGNMENT  shift, and go to state 160

    $default  reduce using rule 87 (exp)


state 138

   45 statement: Print .

    $default  reduce using rule 45 (statement)


state 139

   46 statement: statement_var_dec .

    $default  reduce using rule 46 (statement)


state 140

   47 statement: If .

    $default  reduce using rule 47 (statement)


state 141

   48 statement: For .

    $default  reduce using rule 48 (statement)


state 142

   49 statement: While .

    $default  reduce using rule 49 (statement)


state 143

   50 statement: Return .

    $default  reduce using rule 50 (statement)


state 144

   51 statement: Break .

    $default  reduce using rule 51 (statement)


state 145

   52 statement: Continue .

    $default  reduce using rule 52 (statement)


state 146

   43 statement: exp . TOKEN_SEMICOLON
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_SEMICOLON       shift, and go to state 161
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 147

   34 formal_arguments: formal_arguments TOKEN_COMMA formal_argument .

    $default  reduce using rule 34 (formal_arguments)


state 148

  119 function_call_body: TOKEN_LP actual_arguments TOKEN_RP .

    $default  reduce using rule 119 (function_call_body)


state 149

  122 actual_arguments_list: actual_arguments_list TOKEN_COMMA . exp

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 162
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 150

   56 Print: TOKEN_PRINT TOKEN_LP . exp TOKEN_RP TOKEN_SEMICOLON

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 163
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 151

   79 Return: TOKEN_RETURN @8 . exp TOKEN_SEMICOLON @9 ret

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 164
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 152

   80 Break: TOKEN_BREAK TOKEN_SEMICOLON .

    $default  reduce using rule 80 (Break)


state 153

   81 Continue: TOKEN_CONTINUE TOKEN_SEMICOLON .

    $default  reduce using rule 81 (Continue)


state 154

   75 While: TOKEN_WHILE while_tbl . M TOKEN_LP exp TOKEN_RP @6 M block @7 M

    $default  reduce using rule 9 (M)

    M  go to state 165


state 155

   71 For: TOKEN_FOR for_tbl . TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M

    TOKEN_LP  shift, and go to state 166


state 156

   58 If: TOKEN_IF if_tbl . TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs
   59   | TOKEN_IF if_tbl . TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE NS M block M

    TOKEN_LP  shift, and go to state 167


state 157

   38 block: M TOKEN_LCB . statements_list TOKEN_RCB M

    $default  reduce using rule 41 (statements_list)

    statements_list  go to state 168


state 158

   22 var_list: var_list . TOKEN_COMMA var_list_item
   57 statement_var_dec: return_type var_list . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 169
    TOKEN_COMMA      shift, and go to state 40


state 159

   31 func_body: TOKEN_ID NP M @2 TOKEN_LP formal_arguments TOKEN_RP block M . ret M

    $default  reduce using rule 32 (ret)

    ret  go to state 170


state 160

   53 assignment: lvalue TOKEN_ASSIGNMENT . exp TOKEN_SEMICOLON

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 171
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 161

   43 statement: exp TOKEN_SEMICOLON .

    $default  reduce using rule 43 (statement)


state 162

   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp
  122 actual_arguments_list: actual_arguments_list TOKEN_COMMA exp .

    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88

    $default  reduce using rule 122 (actual_arguments_list)


state 163

   56 Print: TOKEN_PRINT TOKEN_LP exp . TOKEN_RP TOKEN_SEMICOLON
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_RP              shift, and go to state 172
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 164

   79 Return: TOKEN_RETURN @8 exp . TOKEN_SEMICOLON @9 ret
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_SEMICOLON       shift, and go to state 173
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 165

   75 While: TOKEN_WHILE while_tbl M . TOKEN_LP exp TOKEN_RP @6 M block @7 M

    TOKEN_LP  shift, and go to state 174


state 166

   71 For: TOKEN_FOR for_tbl TOKEN_LP . TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M

    TOKEN_ID  shift, and go to state 175


state 167

   58 If: TOKEN_IF if_tbl TOKEN_LP . exp TOKEN_RP M if_code M block if_pop M Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP . exp TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE NS M block M

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 176
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 168

   38 block: M TOKEN_LCB statements_list . TOKEN_RCB M
   40 statements_list: statements_list . M statement

    TOKEN_RCB  shift, and go to state 177

    $default  reduce using rule 9 (M)

    M  go to state 178


state 169

   57 statement_var_dec: return_type var_list TOKEN_SEMICOLON .

    $default  reduce using rule 57 (statement_var_dec)


state 170

   31 func_body: TOKEN_ID NP M @2 TOKEN_LP formal_arguments TOKEN_RP block M ret . M

    $default  reduce using rule 9 (M)

    M  go to state 179


state 171

   53 assignment: lvalue TOKEN_ASSIGNMENT exp . TOKEN_SEMICOLON
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_SEMICOLON       shift, and go to state 180
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 172

   56 Print: TOKEN_PRINT TOKEN_LP exp TOKEN_RP . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 181


state 173

   79 Return: TOKEN_RETURN @8 exp TOKEN_SEMICOLON . @9 ret

    $default  reduce using rule 78 (@9)

    @9  go to state 182


state 174

   75 While: TOKEN_WHILE while_tbl M TOKEN_LP . exp TOKEN_RP @6 M block @7 M

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 183
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 175

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID . TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M

    TOKEN_IN  shift, and go to state 184


state 176

   58 If: TOKEN_IF if_tbl TOKEN_LP exp . TOKEN_RP M if_code M block if_pop M Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP exp . TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE NS M block M
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_RP              shift, and go to state 185
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 177

   38 block: M TOKEN_LCB statements_list TOKEN_RCB . M

    $default  reduce using rule 9 (M)

    M  go to state 186


state 178

   40 statements_list: statements_list M . statement

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_PRINT        shift, and go to state 123
    TOKEN_RETURN       shift, and go to state 124
    TOKEN_BREAK        shift, and go to state 125
    TOKEN_CONTINUE     shift, and go to state 126
    TOKEN_WHILE        shift, and go to state 127
    TOKEN_FOR          shift, and go to state 128
    TOKEN_LP           shift, and go to state 48
    TOKEN_SEMICOLON    shift, and go to state 129
    TOKEN_ID           shift, and go to state 130
    TOKEN_IF           shift, and go to state 131
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    return_type           go to state 133
    statement             go to state 187
    assignment            go to state 136
    lvalue                go to state 137
    Print                 go to state 138
    statement_var_dec     go to state 139
    If                    go to state 140
    For                   go to state 141
    While                 go to state 142
    Return                go to state 143
    Break                 go to state 144
    Continue              go to state 145
    exp                   go to state 146
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 179

   31 func_body: TOKEN_ID NP M @2 TOKEN_LP formal_arguments TOKEN_RP block M ret M .

    $default  reduce using rule 31 (func_body)


state 180

   53 assignment: lvalue TOKEN_ASSIGNMENT exp TOKEN_SEMICOLON .

    $default  reduce using rule 53 (assignment)


state 181

   56 Print: TOKEN_PRINT TOKEN_LP exp TOKEN_RP TOKEN_SEMICOLON .

    $default  reduce using rule 56 (Print)


state 182

   79 Return: TOKEN_RETURN @8 exp TOKEN_SEMICOLON @9 . ret

    $default  reduce using rule 32 (ret)

    ret  go to state 188


state 183

   75 While: TOKEN_WHILE while_tbl M TOKEN_LP exp . TOKEN_RP @6 M block @7 M
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_RP              shift, and go to state 189
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 184

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN . exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 190
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 185

   58 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP . M if_code M block if_pop M Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP . M if_code M block if_pop M Elseifs TOKEN_ELSE NS M block M

    $default  reduce using rule 9 (M)

    M  go to state 191


state 186

   38 block: M TOKEN_LCB statements_list TOKEN_RCB M .

    $default  reduce using rule 38 (block)


state 187

   40 statements_list: statements_list M statement .

    $default  reduce using rule 40 (statements_list)


state 188

   79 Return: TOKEN_RETURN @8 exp TOKEN_SEMICOLON @9 ret .

    $default  reduce using rule 79 (Return)


state 189

   75 While: TOKEN_WHILE while_tbl M TOKEN_LP exp TOKEN_RP . @6 M block @7 M

    $default  reduce using rule 73 (@6)

    @6  go to state 192


state 190

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp . TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_TO              shift, and go to state 193
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 191

   58 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M . if_code M block if_pop M Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M . if_code M block if_pop M Elseifs TOKEN_ELSE NS M block M

    $default  reduce using rule 60 (if_code)

    if_code  go to state 194


state 192

   75 While: TOKEN_WHILE while_tbl M TOKEN_LP exp TOKEN_RP @6 . M block @7 M

    $default  reduce using rule 9 (M)

    M  go to state 195


state 193

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO . exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 196
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 194

   58 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code . M block if_pop M Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code . M block if_pop M Elseifs TOKEN_ELSE NS M block M

    $default  reduce using rule 9 (M)

    M  go to state 197


state 195

   75 While: TOKEN_WHILE while_tbl M TOKEN_LP exp TOKEN_RP @6 M . block @7 M

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_PRINT        shift, and go to state 123
    TOKEN_RETURN       shift, and go to state 124
    TOKEN_BREAK        shift, and go to state 125
    TOKEN_CONTINUE     shift, and go to state 126
    TOKEN_WHILE        shift, and go to state 127
    TOKEN_FOR          shift, and go to state 128
    TOKEN_LP           shift, and go to state 48
    TOKEN_SEMICOLON    shift, and go to state 129
    TOKEN_ID           shift, and go to state 130
    TOKEN_IF           shift, and go to state 131
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    $default  reduce using rule 9 (M)

    M                     go to state 132
    return_type           go to state 133
    block                 go to state 198
    statement             go to state 135
    assignment            go to state 136
    lvalue                go to state 137
    Print                 go to state 138
    statement_var_dec     go to state 139
    If                    go to state 140
    For                   go to state 141
    While                 go to state 142
    Return                go to state 143
    Break                 go to state 144
    Continue              go to state 145
    exp                   go to state 146
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 196

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp . TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_STEPS           shift, and go to state 199
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 197

   58 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M . block if_pop M Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M . block if_pop M Elseifs TOKEN_ELSE NS M block M

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_PRINT        shift, and go to state 123
    TOKEN_RETURN       shift, and go to state 124
    TOKEN_BREAK        shift, and go to state 125
    TOKEN_CONTINUE     shift, and go to state 126
    TOKEN_WHILE        shift, and go to state 127
    TOKEN_FOR          shift, and go to state 128
    TOKEN_LP           shift, and go to state 48
    TOKEN_SEMICOLON    shift, and go to state 129
    TOKEN_ID           shift, and go to state 130
    TOKEN_IF           shift, and go to state 131
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    $default  reduce using rule 9 (M)

    M                     go to state 132
    return_type           go to state 133
    block                 go to state 200
    statement             go to state 135
    assignment            go to state 136
    lvalue                go to state 137
    Print                 go to state 138
    statement_var_dec     go to state 139
    If                    go to state 140
    For                   go to state 141
    While                 go to state 142
    Return                go to state 143
    Break                 go to state 144
    Continue              go to state 145
    exp                   go to state 146
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 198

   75 While: TOKEN_WHILE while_tbl M TOKEN_LP exp TOKEN_RP @6 M block . @7 M

    $default  reduce using rule 74 (@7)

    @7  go to state 201


state 199

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS . exp TOKEN_RP M @3 M @4 M block @5 M

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 202
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 200

   58 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block . if_pop M Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block . if_pop M Elseifs TOKEN_ELSE NS M block M

    $default  reduce using rule 61 (if_pop)

    if_pop  go to state 203


state 201

   75 While: TOKEN_WHILE while_tbl M TOKEN_LP exp TOKEN_RP @6 M block @7 . M

    $default  reduce using rule 9 (M)

    M  go to state 204


state 202

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp . TOKEN_RP M @3 M @4 M block @5 M
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_RP              shift, and go to state 205
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 203

   58 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop . M Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop . M Elseifs TOKEN_ELSE NS M block M

    $default  reduce using rule 9 (M)

    M  go to state 206


state 204

   75 While: TOKEN_WHILE while_tbl M TOKEN_LP exp TOKEN_RP @6 M block @7 M .

    $default  reduce using rule 75 (While)


state 205

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP . M @3 M @4 M block @5 M

    $default  reduce using rule 9 (M)

    M  go to state 207


state 206

   58 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M . Elseifs
   59   | TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M . Elseifs TOKEN_ELSE NS M block M

    $default  reduce using rule 65 (Elseifs)

    Elseifs  go to state 208


state 207

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M . @3 M @4 M block @5 M

    $default  reduce using rule 68 (@3)

    @3  go to state 209


state 208

   58 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs .
   59   | TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs . TOKEN_ELSE NS M block M
   64 Elseifs: Elseifs . Elseif M

    TOKEN_ELSEIF  shift, and go to state 210
    TOKEN_ELSE    shift, and go to state 211

    $default  reduce using rule 58 (If)

    Elseif  go to state 212


state 209

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 . M @4 M block @5 M

    $default  reduce using rule 9 (M)

    M  go to state 213


state 210

   66 Elseif: TOKEN_ELSEIF . TOKEN_LP exp TOKEN_RP M block ES M

    TOKEN_LP  shift, and go to state 214


state 211

   59 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE . NS M block M

    $default  reduce using rule 63 (NS)

    NS  go to state 215


state 212

   64 Elseifs: Elseifs Elseif . M

    $default  reduce using rule 9 (M)

    M  go to state 216


state 213

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M . @4 M block @5 M

    $default  reduce using rule 69 (@4)

    @4  go to state 217


state 214

   66 Elseif: TOKEN_ELSEIF TOKEN_LP . exp TOKEN_RP M block ES M

    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_LP           shift, and go to state 48
    TOKEN_ID           shift, and go to state 49
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    lvalue                go to state 56
    exp                   go to state 218
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 215

   59 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE NS . M block M

    $default  reduce using rule 9 (M)

    M  go to state 219


state 216

   64 Elseifs: Elseifs Elseif M .

    $default  reduce using rule 64 (Elseifs)


state 217

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 . M block @5 M

    $default  reduce using rule 9 (M)

    M  go to state 220


state 218

   66 Elseif: TOKEN_ELSEIF TOKEN_LP exp . TOKEN_RP M block ES M
   95 binary_operation: exp . TOKEN_ADDITION exp
   96                 | exp . TOKEN_SUBTRACTION exp
   97                 | exp . TOKEN_MULTIPLICATION exp
   98                 | exp . TOKEN_DIVISION exp
   99                 | exp . TOKEN_MODULO exp
  100                 | exp . TOKEN_POWER exp
  101                 | exp . TOKEN_SHIFT_LEFT exp
  102                 | exp . TOKEN_SHIFT_RIGHT exp
  103 logical_operation: exp . TOKEN_AND M exp
  104                  | exp . TOKEN_OR M exp
  105 comparison_operation: exp . TOKEN_LT exp
  106                     | exp . TOKEN_LE exp
  107                     | exp . TOKEN_GT exp
  108                     | exp . TOKEN_GE exp
  109                     | exp . TOKEN_EQ exp
  110                     | exp . TOKEN_NE exp
  111 bitwise_operation: exp . TOKEN_BITWISE_AND exp
  112                  | exp . TOKEN_BITWISE_OR exp

    TOKEN_RP              shift, and go to state 221
    TOKEN_OR              shift, and go to state 71
    TOKEN_AND             shift, and go to state 72
    TOKEN_BITWISE_OR      shift, and go to state 73
    TOKEN_BITWISE_AND     shift, and go to state 74
    TOKEN_NE              shift, and go to state 75
    TOKEN_EQ              shift, and go to state 76
    TOKEN_LE              shift, and go to state 77
    TOKEN_LT              shift, and go to state 78
    TOKEN_GE              shift, and go to state 79
    TOKEN_GT              shift, and go to state 80
    TOKEN_SHIFT_LEFT      shift, and go to state 81
    TOKEN_SHIFT_RIGHT     shift, and go to state 82
    TOKEN_SUBTRACTION     shift, and go to state 83
    TOKEN_ADDITION        shift, and go to state 84
    TOKEN_MODULO          shift, and go to state 85
    TOKEN_DIVISION        shift, and go to state 86
    TOKEN_MULTIPLICATION  shift, and go to state 87
    TOKEN_POWER           shift, and go to state 88


state 219

   59 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE NS M . block M

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_PRINT        shift, and go to state 123
    TOKEN_RETURN       shift, and go to state 124
    TOKEN_BREAK        shift, and go to state 125
    TOKEN_CONTINUE     shift, and go to state 126
    TOKEN_WHILE        shift, and go to state 127
    TOKEN_FOR          shift, and go to state 128
    TOKEN_LP           shift, and go to state 48
    TOKEN_SEMICOLON    shift, and go to state 129
    TOKEN_ID           shift, and go to state 130
    TOKEN_IF           shift, and go to state 131
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    $default  reduce using rule 9 (M)

    M                     go to state 132
    return_type           go to state 133
    block                 go to state 222
    statement             go to state 135
    assignment            go to state 136
    lvalue                go to state 137
    Print                 go to state 138
    statement_var_dec     go to state 139
    If                    go to state 140
    For                   go to state 141
    While                 go to state 142
    Return                go to state 143
    Break                 go to state 144
    Continue              go to state 145
    exp                   go to state 146
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 220

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M . block @5 M

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_PRINT        shift, and go to state 123
    TOKEN_RETURN       shift, and go to state 124
    TOKEN_BREAK        shift, and go to state 125
    TOKEN_CONTINUE     shift, and go to state 126
    TOKEN_WHILE        shift, and go to state 127
    TOKEN_FOR          shift, and go to state 128
    TOKEN_LP           shift, and go to state 48
    TOKEN_SEMICOLON    shift, and go to state 129
    TOKEN_ID           shift, and go to state 130
    TOKEN_IF           shift, and go to state 131
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    $default  reduce using rule 9 (M)

    M                     go to state 132
    return_type           go to state 133
    block                 go to state 223
    statement             go to state 135
    assignment            go to state 136
    lvalue                go to state 137
    Print                 go to state 138
    statement_var_dec     go to state 139
    If                    go to state 140
    For                   go to state 141
    While                 go to state 142
    Return                go to state 143
    Break                 go to state 144
    Continue              go to state 145
    exp                   go to state 146
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 221

   66 Elseif: TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP . M block ES M

    $default  reduce using rule 9 (M)

    M  go to state 224


state 222

   59 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE NS M block . M

    $default  reduce using rule 9 (M)

    M  go to state 225


state 223

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block . @5 M

    $default  reduce using rule 70 (@5)

    @5  go to state 226


state 224

   66 Elseif: TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP M . block ES M

    TOKEN_INT_TYPE     shift, and go to state 15
    TOKEN_REAL_TYPE    shift, and go to state 16
    TOKEN_BOOL_TYPE    shift, and go to state 17
    TOKEN_STRING_TYPE  shift, and go to state 18
    TOKEN_TRUE         shift, and go to state 46
    TOKEN_FALSE        shift, and go to state 47
    TOKEN_PRINT        shift, and go to state 123
    TOKEN_RETURN       shift, and go to state 124
    TOKEN_BREAK        shift, and go to state 125
    TOKEN_CONTINUE     shift, and go to state 126
    TOKEN_WHILE        shift, and go to state 127
    TOKEN_FOR          shift, and go to state 128
    TOKEN_LP           shift, and go to state 48
    TOKEN_SEMICOLON    shift, and go to state 129
    TOKEN_ID           shift, and go to state 130
    TOKEN_IF           shift, and go to state 131
    TOKEN_INTEGER      shift, and go to state 50
    TOKEN_REAL         shift, and go to state 51
    TOKEN_STRING       shift, and go to state 52
    TOKEN_SUBTRACTION  shift, and go to state 53
    TOKEN_BITWISE_NOT  shift, and go to state 54
    TOKEN_NOT          shift, and go to state 55

    $default  reduce using rule 9 (M)

    M                     go to state 132
    return_type           go to state 133
    block                 go to state 227
    statement             go to state 135
    assignment            go to state 136
    lvalue                go to state 137
    Print                 go to state 138
    statement_var_dec     go to state 139
    If                    go to state 140
    For                   go to state 141
    While                 go to state 142
    Return                go to state 143
    Break                 go to state 144
    Continue              go to state 145
    exp                   go to state 146
    binary_operation      go to state 58
    logical_operation     go to state 59
    comparison_operation  go to state 60
    bitwise_operation     go to state 61
    unary_operation       go to state 62
    function_call         go to state 63


state 225

   59 If: TOKEN_IF if_tbl TOKEN_LP exp TOKEN_RP M if_code M block if_pop M Elseifs TOKEN_ELSE NS M block M .

    $default  reduce using rule 59 (If)


state 226

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 . M

    $default  reduce using rule 9 (M)

    M  go to state 228


state 227

   66 Elseif: TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP M block . ES M

    $default  reduce using rule 67 (ES)

    ES  go to state 229


state 228

   71 For: TOKEN_FOR for_tbl TOKEN_LP TOKEN_ID TOKEN_IN exp TOKEN_TO exp TOKEN_STEPS exp TOKEN_RP M @3 M @4 M block @5 M .

    $default  reduce using rule 71 (For)


state 229

   66 Elseif: TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP M block ES . M

    $default  reduce using rule 9 (M)

    M  go to state 230


state 230

   66 Elseif: TOKEN_ELSEIF TOKEN_LP exp TOKEN_RP M block ES M .

    $default  reduce using rule 66 (Elseif)
